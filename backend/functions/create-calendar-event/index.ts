import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const GOOGLE_CLIENT_ID = Deno.env.get("GOOGLE_CLIENT_ID")!;
const GOOGLE_CLIENT_SECRET = Deno.env.get("GOOGLE_CLIENT_SECRET")!;

serve(async (req) => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  };
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { goalContent, eventDate, eventTime, eventEndTime, eventEndDate } = await req.json();
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL")!,
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
    );

    console.log("Received params:", { goalContent, eventDate, eventTime, eventEndTime });

    // 1. DBからリフレッシュトークンを取得
    const { data: secretData, error: secretError } = await supabase
      .from('user_secrets')
      .select('google_refresh_token')
      .single(); // 仮に1ユーザーしかいない前提
    if (secretError || !secretData.google_refresh_token) throw new Error("Refresh token not found.");

    // 2. リフレッシュトークンを使って新しいアクセストークンを取得
    const tokenResponse = await fetch("https://oauth2.googleapis.com/token", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        client_id: GOOGLE_CLIENT_ID,
        client_secret: GOOGLE_CLIENT_SECRET,
        refresh_token: secretData.google_refresh_token,
        grant_type: "refresh_token",
      }),
    });
    const tokens = await tokenResponse.json();
    if (!tokens.access_token) throw new Error("Failed to refresh access token.");

    // 3. Googleカレンダーにイベントを作成
    // 日付と時間を解析
    let eventStart: any;
    let eventEnd: any;

    if (eventDate && eventTime) {
      // 時刻指定のイベント
      const startDateTime = `${eventDate}T${eventTime}:00`;
      let endDateTime: string;

      if (eventEndDate && eventEndTime) {
        // 終了日時が両方指定されている
        endDateTime = `${eventEndDate}T${eventEndTime}:00`;
      } else if (eventEndTime) {
        // 終了時刻のみ指定（同日）
        endDateTime = `${eventDate}T${eventEndTime}:00`;
      } else {
        // 終了時刻がない場合は同じ時間の59分59秒
        endDateTime = `${eventDate}T${eventTime.split(':')[0]}:59:59`;
      }

      eventStart = {
        'dateTime': startDateTime,
        'timeZone': 'Asia/Tokyo'
      };
      eventEnd = {
        'dateTime': endDateTime,
        'timeZone': 'Asia/Tokyo'
      };
    } else if (eventDate) {
      // 日付のみ（終日イベント）
      eventStart = { 'date': eventDate };

      if (eventEndDate) {
        // 複数日にまたがる終日イベント
        // Google Calendar APIでは終了日は実際の終了日の翌日を指定する必要がある
        const endDateObj = new Date(eventEndDate);
        endDateObj.setDate(endDateObj.getDate() + 1);
        eventEnd = { 'date': endDateObj.toISOString().split('T')[0] };
      } else {
        // 単日の終日イベント
        const endDateObj = new Date(eventDate);
        endDateObj.setDate(endDateObj.getDate() + 1);
        eventEnd = { 'date': endDateObj.toISOString().split('T')[0] };
      }
    } else {
      // デフォルト：今日の終日イベント
      const today = new Date().toISOString().split('T')[0];
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      eventStart = { 'date': today };
      eventEnd = { 'date': tomorrow.toISOString().split('T')[0] };
    }

    const event = {
      'summary': goalContent,
      'description': 'Generated by My Growth Assistant',
      'start': eventStart,
      'end': eventEnd,
    };

    console.log("Creating event:", JSON.stringify(event));

    const calendarResponse = await fetch('https://www.googleapis.com/calendar/v3/calendars/primary/events', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${tokens.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(event),
    });

    if (!calendarResponse.ok) {
        const errorBody = await calendarResponse.json();
        throw new Error(`Failed to create calendar event: ${JSON.stringify(errorBody)}`);
    }

    return new Response(JSON.stringify({ message: "Calendar event created!" }), { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 200 });

  } catch (err) {
    return new Response(JSON.stringify({ message: err.message }), { headers: { ...corsHeaders, "Content-Type": "application/json" }, status: 500 });
  }
});
